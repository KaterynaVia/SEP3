@page "/MyClasses/{Id}"
@using Domain
@using System.Linq
@using System.Text.Json
@using Blazor.Auth
@inject HttpClient client
@inject AuthenticationStateProvider StateProvider;
@inject IAuthService authService

<h1 class="mt-4 mb-3">My Classes</h1>

@if (authService is JwtAuthService jwtAuthService)
{
    @if (jwtAuthService.LoggedInUserType == JwtAuthService.UserType.Student)
    {
        @if (classes == null)
        {
            <p>Loading...</p>
        }
        else if (classes.Any())
        {
            @if (classes != null)
            {
                <div class="list-group">
                    @foreach (var cls in classes.Where(c => c.Students != null && c.Students.Contains(Id)))
                    {
                        <a href="/ClassDetail/@cls.Name" class="list-group-item list-group-item-action">@cls.Name</a>
                    }
                </div>
            }

        }
        else
        {
            <p>No classes found for this student.</p>
        }
    }
    else if (jwtAuthService.LoggedInUserType == JwtAuthService.UserType.Teacher)
    {
        @if (classes == null)
        {
            <p>Loading...</p>
        }
        else if (classes.Any())
        {
            <div class="list-group">
                @foreach (var cls in classes.Where(c => c.TeacherId.Contains(Id)))
                {
                    <a href="/ClassDetail/@cls.Name" class="list-group-item list-group-item-action">@cls.Name</a>
                }
            </div>
        }
        else
        {
            <p>No classes found for this teacher.</p>
        }
    }
    else
    {
        <p>Other user-specific content</p>
    }
}
else
{
    <p>Unable to access the LoggedInUserType property.</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    public IEnumerable<Class> classes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetLoggedInUserId();
            Console.WriteLine("Getting classes...");
            classes = await GetClasses();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            // Handle the exception here
        }
    }

    private async Task<IEnumerable<Class>> GetClasses()
    {
        try
        {
            HttpResponseMessage response = await client.GetAsync("/classes");
            string result = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception(result);
            }

            return JsonSerializer.Deserialize<IEnumerable<Class>>(result, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            throw; // Re-throw the exception to handle it in OnInitializedAsync()
        }
    }
    
    private async Task<string> GetLoggedInUserId()
    {
        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();

    // Check if the user is authenticated
        if (state != null && state.User.Identity.IsAuthenticated)
        {
            var usernameClaim = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"));

    // Check if the claim is found and has a non-null value
            if (usernameClaim != null && !string.IsNullOrEmpty(usernameClaim.Value))
            {
                return usernameClaim.Value;
            }
            else
            {
    // Handle the case where the username claim is not found or has an empty value
    // You can log or return a default value or throw an exception here
                return "DefaultUsername"; // Replace with appropriate handling
            }
        }
        else
        {
    // Handle the case where the user is not authenticated
    // You can log, return a default value, or throw an exception here
            return "UserNotAuthenticated"; // Replace with appropriate handling
        }
    }

}
