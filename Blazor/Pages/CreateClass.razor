@page "/CreateClass"
@using Domain
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Reflection.Metadata
@inject IUserService userService;
@inject IClassService classService;


<div class="container mt-5">
    <h1 class="text-center mb-4">CREATE CLASS</h1>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <form>
                        <div class="mb-3">
                            <label for="className" class="form-label">Name of the class:</label>
                            <input type="text" class="form-control" id="className" @bind="nameOfClass">
                        </div>
                        <div class="mb-3">
                            <label for="teacher" class="form-label">Teacher:</label>
                            <select class="form-select" id="teacher" @bind="selectedTeacher">
                                <option value="">Select Teacher</option>
                                @if (teachers != null)
                                {
                                    @foreach (var teacher in teachers)
                                    {
                                        <option value="@teacher.Name">@teacher.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="student" class="form-label">Student:</label>
                            
                            @* <select class="form-select" id="student" @onchange="HandleStudentSelection" multiple="multiple"> *@
                            @*     @if (students != null) *@
                            @*     { *@
                            @*         @foreach (var student in students) *@
                            @*         { *@
                            @*             <option value="@student.Id">@student.Id</option> *@
                            @*         } *@
                            @*     } *@
                            @* </select> *@
                            @* <button @onclick="ClearSelection">Clear Selection</button> *@
                            
                            <div class="mb-3">
                                <label class="form-label">Students:</label>
                                <div>
                                    @if (students != null)
                                    {
                                        @foreach (var student in students)
                                        {
                                            <div>
                                                <input type="checkbox" id="@student.Id" @onchange="HandleStudentSelection" value="@student.Id" />
                                                <label for="@student.Id">@student.Id</label>
                                            </div>
                                        }
                                    }
                                </div>
                                <button @onclick="ClearSelection">Clear Selection</button>
                            </div>


                        </div>
                        <button @onclick="CreateClassBlazor" type="submit" class="btn btn-primary">Create Class</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">List of Classes</h5>
                    <div class="subject">
                        <p>SDJ3</p>
                        <p>NES</p>
                        <p>CAO</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private string nameOfClass = "";
    private string? selectedTeacher = " ";
    //private string? selectedStudent = " ";
    private List<string>? selectedStudentIds = new List<string>();
    private string selectedStudentsString = "";
    private IEnumerable<Teacher>? teachers;
    private IEnumerable<Student>? students;
    private string resultMsg = "";


    protected override async Task OnInitializedAsync()
    {
        resultMsg = "";
        try
        {
            teachers = await userService.GetTeachers();
            students = await userService.GetStudents();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = "Error retrieving data: " + e.Message;
        }
    }
    
    private async Task CreateClassBlazor()
    {
        resultMsg = "";

        if (selectedTeacher == null)
        {
            resultMsg = "You must select a teacher.";
            return;
        }

        if (string.IsNullOrEmpty(nameOfClass))
        {
            resultMsg = "Name cannot be empty.";
            return;
        }
        
        try
        {
            ClassCreationDto dto = new(nameOfClass, selectedTeacher);
            await classService.CreateAsyncClass(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

    private void HandleStudentSelection(ChangeEventArgs e)
    {
        //Line pod tymto returnuje iba True/False, treba ChatGPT donutit aby to upravil tak ze to vracia ID a je to hotovo.
        var studentId = e.Value?.ToString();
        if (studentId != null)
        {
            var isChecked = (bool)e.Value;
            if (isChecked)
            {
                selectedStudentIds.Add(studentId);
            }
            else
            {
                selectedStudentIds.Remove(studentId);
            }
        }
    }

    private void ClearSelection()
    {
        foreach (var studentId in selectedStudentIds)
        {
            Console.WriteLine(studentId);
        }
        selectedStudentIds.Clear(); // Clear the selected student IDs
    }
    
   
}