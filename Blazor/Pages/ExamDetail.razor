@page "/ExamDetail/{NameOfExam}"
@using Domain
@using HttpClients.ClientInterfaces
@inject IExamService examService;

<div class="container mt-4">
    <h1 class="mt-4">EXAM DETAIL</h1>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@ExamName</h5>
                    <p class="card-text">
                        <strong>Date & Time:</strong> @ExamDateTime
                    </p>
                    <p class="card-text">
                        <strong>Class:</strong> @ClassName
                    </p>
                    <p class="card-text">
                        <strong>Teacher:</strong> @ClassTeacher
                    </p>
                    <div>
                        <p class="fw-bold">Students:</p>
                        @if (ClassStudents != null)
                        {
                            @foreach (var classStudent in ClassStudents)
                            {
                                <p>@classStudent</p>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @* <div class="col-md-6"> *@
        @*     <div class="d-flex justify-content-end align-items-end"> *@
        @*         <button href="/CreateExam" class="btn btn-primary">Back</button> *@
        @*     </div> *@
        @* </div> *@
    </div>
</div>



@code {
    [Parameter]
    public string NameOfExam { get; set; }

    private string ExamName = "";
    private string ExamDateTime = "";
    private string ClassName = " ";
    private string ClassTeacher = "";
    private List<string> ClassStudents;
    private IEnumerable<Exam> selectedExam; // Keep it as IEnumerable<Exam>
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(NameOfExam))
            {
                // Fetch the exams by name using the service
                selectedExam = await examService.GetExam(NameOfExam);

                if (selectedExam != null && selectedExam.Any())
                {
                    // Find the exam by matching the NameOfExam
                    var examToDisplay = selectedExam.FirstOrDefault(exam => 
                        exam.NameOfExam.Equals(NameOfExam, StringComparison.OrdinalIgnoreCase));

                    if (examToDisplay != null)
                    {
                        // Extract information from the found exam
                        ExamName = examToDisplay.NameOfExam;
                        ExamDateTime = examToDisplay.DateTime;
                        ClassName = examToDisplay.Class.Name;
                        ClassStudents = examToDisplay.Class.Students;
                        ClassTeacher = examToDisplay.Class.TeacherId;

                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            // Handle exceptions as needed
        }
    }
}


