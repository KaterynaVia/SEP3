Index: Domain/Domain.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFramework>net7.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n</Project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Domain.csproj b/Domain/Domain.csproj
--- a/Domain/Domain.csproj	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/Domain.csproj	(date 1699354119413)
@@ -6,4 +6,5 @@
         <Nullable>enable</Nullable>
     </PropertyGroup>
 
+
 </Project>
Index: Domain/Supervisor.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Domain;\n\npublic class Supervisor : User\n{\n    public Supervisor(string password, int id) : base(password, id)\n    {\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Supervisor.cs b/Domain/Supervisor.cs
--- a/Domain/Supervisor.cs	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/Supervisor.cs	(date 1699356468854)
@@ -2,7 +2,7 @@
 
 public class Supervisor : User
 {
-    public Supervisor(string password, int id) : base(password, id)
+    public Supervisor(string password, string id, int userId) : base(password, id)
     {
     }
 }
\ No newline at end of file
Index: Domain/Student.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Domain;\n\npublic class Student:User\n{\n    public Student(string password, int id) : base(password, id)\n    {\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Student.cs b/Domain/Student.cs
--- a/Domain/Student.cs	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/Student.cs	(date 1699356421332)
@@ -1,8 +1,11 @@
 namespace Domain;
 
-public class Student:User
+public class Student : User
 {
-    public Student(string password, int id) : base(password, id)
+    public string Name { get; set; }
+    public Student(string id, string password, string name) : base(id, password)
     {
+        Name = name;
     }
+    
 }
\ No newline at end of file
Index: Domain/Teacher.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Domain;\n\npublic class Teacher : User\n{\n    public string Name { get; set; }\n    public Teacher(string name, string password, int id) : base(password, id)\n    {\n        Name = name;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Teacher.cs b/Domain/Teacher.cs
--- a/Domain/Teacher.cs	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/Teacher.cs	(date 1699355201794)
@@ -1,10 +1,21 @@
+using System.Text.Json.Serialization;
+
 namespace Domain;
 
 public class Teacher : User
 {
     public string Name { get; set; }
-    public Teacher(string name, string password, int id) : base(password, id)
+    
+    [JsonConstructor]
+    public Teacher(string name, string password, string id, int userId) : base(password, id)
+    {
+        Name = name;
+    }
+    
+    public Teacher(string name, string password, string id) : base(password, id)
     {
         Name = name;
     }
+
+    
 }
\ No newline at end of file
Index: Domain/User.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Domain;\n\npublic class User\n{\n    \n    public  int Id { get; set; }\n    public string Password { get; set; }\n\n    public User(string password, int id)\n    {\n        Id = id;\n        Password = password;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/User.cs b/Domain/User.cs
--- a/Domain/User.cs	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/User.cs	(date 1699356456573)
@@ -2,13 +2,15 @@
 
 public class User
 {
-    
-    public  int Id { get; set; }
+    public  string Id { get; set; }
+    public int UserId { get; set; }
     public string Password { get; set; }
+    
 
-    public User(string password, int id)
+    public User(string id, string password)
     {
         Id = id;
         Password = password;
     }
+    
 }
\ No newline at end of file
Index: SEP3.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nMicrosoft Visual Studio Solution File, Format Version 12.00\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Domain\", \"Domain\\Domain.csproj\", \"{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\nEndGlobal\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEP3.sln b/SEP3.sln
--- a/SEP3.sln	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/SEP3.sln	(date 1699356698908)
@@ -2,6 +2,16 @@
 Microsoft Visual Studio Solution File, Format Version 12.00
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Domain", "Domain\Domain.csproj", "{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WebApi", "WebApi\WebApi.csproj", "{6B476526-2165-43AA-B4A1-7265735B2390}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FileData", "FileData\FileData.csproj", "{2E517C17-DD50-4BBE-AC74-2ED074A0289F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Application", "Application\Application.csproj", "{94072FE8-A400-412C-9BFF-DD070ED2E36F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Blazor", "Blazor\Blazor.csproj", "{55309BB9-45DE-4805-ACBD-0EE6BD3594D5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "HttpClients", "HttpClients\HttpClients.csproj", "{C0313D91-3EFB-4E4A-A57D-8845C595E99C}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -12,5 +22,25 @@
 		{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{5B5568ED-C426-4F6C-97B7-B1FD12870AA9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{6B476526-2165-43AA-B4A1-7265735B2390}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{6B476526-2165-43AA-B4A1-7265735B2390}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{6B476526-2165-43AA-B4A1-7265735B2390}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{6B476526-2165-43AA-B4A1-7265735B2390}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2E517C17-DD50-4BBE-AC74-2ED074A0289F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2E517C17-DD50-4BBE-AC74-2ED074A0289F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2E517C17-DD50-4BBE-AC74-2ED074A0289F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2E517C17-DD50-4BBE-AC74-2ED074A0289F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{94072FE8-A400-412C-9BFF-DD070ED2E36F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{94072FE8-A400-412C-9BFF-DD070ED2E36F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{94072FE8-A400-412C-9BFF-DD070ED2E36F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{94072FE8-A400-412C-9BFF-DD070ED2E36F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{55309BB9-45DE-4805-ACBD-0EE6BD3594D5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{55309BB9-45DE-4805-ACBD-0EE6BD3594D5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{55309BB9-45DE-4805-ACBD-0EE6BD3594D5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{55309BB9-45DE-4805-ACBD-0EE6BD3594D5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C0313D91-3EFB-4E4A-A57D-8845C595E99C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{C0313D91-3EFB-4E4A-A57D-8845C595E99C}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C0313D91-3EFB-4E4A-A57D-8845C595E99C}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{C0313D91-3EFB-4E4A-A57D-8845C595E99C}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 EndGlobal
Index: Domain/DTOs/SearchUserParametersDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/DTOs/SearchUserParametersDto.cs b/Domain/DTOs/SearchUserParametersDto.cs
new file mode 100644
--- /dev/null	(date 1699355169289)
+++ b/Domain/DTOs/SearchUserParametersDto.cs	(date 1699355169289)
@@ -0,0 +1,11 @@
+namespace Domain.DTOs;
+
+public class SearchUserParametersDto
+{
+    public string? IdContains { get;  }
+
+    public SearchUserParametersDto(string? idContains)
+    {
+        IdContains = idContains;
+    }
+}
\ No newline at end of file
Index: WebApi/Controllers/TeachersController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/TeachersController.cs b/WebApi/Controllers/TeachersController.cs
new file mode 100644
--- /dev/null	(date 1699358170512)
+++ b/WebApi/Controllers/TeachersController.cs	(date 1699358170512)
@@ -0,0 +1,49 @@
+using Application.LogicInterfaces;
+using Domain;
+using Domain.DTOs;
+using Microsoft.AspNetCore.Mvc;
+
+namespace WebAPI.Controllers;
+[ApiController]
+[Route("[controller]")]
+public class TeachersController : ControllerBase
+{
+    private readonly ITeacherLogic teacherLogic;
+
+    public TeachersController(ITeacherLogic teacherLogic)
+    {
+        this.teacherLogic = teacherLogic;
+    }
+
+    [HttpPost]
+    public async Task<ActionResult<Teacher>> CreateAsyncTeacher(UserCreationDto dto)
+    {
+        try
+        {
+            Teacher teacher = await teacherLogic.CreateAsyncTeacher(dto);
+            return Created($"/teachers/{teacher.UserId}", teacher);
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            return StatusCode(500, e.Message);
+        }
+    }
+    
+    [HttpGet]
+    public async Task<ActionResult<IEnumerable<Teacher>>> GetAsyncTeacher([FromQuery] string? id)
+    {
+        try
+        {
+            SearchUserParametersDto parameters = new(id);
+            IEnumerable<Teacher> teachers = await teacherLogic.GetAsyncTeacher(parameters);
+            return Ok(teachers);
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            return StatusCode(500, e.Message);
+        }
+    }
+
+}
\ No newline at end of file
Index: WebApi/Controllers/StudentsController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/StudentsController.cs b/WebApi/Controllers/StudentsController.cs
new file mode 100644
--- /dev/null	(date 1699358436733)
+++ b/WebApi/Controllers/StudentsController.cs	(date 1699358436733)
@@ -0,0 +1,50 @@
+using Application.LogicInterfaces;
+using Domain;
+using Domain.DTOs;
+using Microsoft.AspNetCore.Mvc;
+
+namespace WebAPI.Controllers;
+
+[ApiController]
+[Route("[controller]")]
+public class StudentsController : ControllerBase
+{
+    private readonly IStudentLogic studentLogic;
+
+    public StudentsController(IStudentLogic studentLogic)
+    {
+        this.studentLogic = studentLogic;
+    }
+
+    [HttpPost]
+    public async Task<ActionResult<User>> CreateAsyncStudent(UserCreationDto dto)
+    {
+        try
+        {
+            Student student = await studentLogic.CreateAsyncStudent(dto);
+            return Created($"/students/{student.UserId}", student);
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            return StatusCode(500, e.Message);
+        }
+    }
+    
+    
+    [HttpGet]
+    public async Task<ActionResult<IEnumerable<Student>>> GetAsyncStudent([FromQuery] string? userId)
+    {
+        try
+        {
+            SearchUserParametersDto parameters = new(userId);
+            IEnumerable<Student> students = await studentLogic.GetAsyncStudent(parameters);
+            return Ok(students);
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            return StatusCode(500, e.Message);
+        }
+    }
+}
\ No newline at end of file
Index: Application/LogicInterfaces/ITeacherLogic.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/LogicInterfaces/ITeacherLogic.cs b/Application/LogicInterfaces/ITeacherLogic.cs
new file mode 100644
--- /dev/null	(date 1699354925727)
+++ b/Application/LogicInterfaces/ITeacherLogic.cs	(date 1699354925727)
@@ -0,0 +1,11 @@
+using Domain;
+using Domain.DTOs;
+
+namespace Application.LogicInterfaces;
+
+public interface ITeacherLogic
+{
+    Task<Teacher> CreateAsyncTeacher(UserCreationDto userToCreate);
+    public Task<IEnumerable<Teacher>> GetAsyncTeacher(SearchUserParametersDto searchParameters);
+
+}
\ No newline at end of file
Index: Domain/obj/Debug/net7.0/Domain.GeneratedMSBuildEditorConfig.editorconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>is_global = true\nbuild_property.TargetFramework = net7.0\nbuild_property.TargetPlatformMinVersion = \nbuild_property.UsingMicrosoftNETSdkWeb = \nbuild_property.ProjectTypeGuids = \nbuild_property.InvariantGlobalization = \nbuild_property.PlatformNeutralAssembly = \nbuild_property.EnforceExtendedAnalyzerRules = \nbuild_property._SupportedPlatformList = Linux,macOS,Windows\nbuild_property.RootNamespace = Domain\nbuild_property.ProjectDir = C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/Debug/net7.0/Domain.GeneratedMSBuildEditorConfig.editorconfig b/Domain/obj/Debug/net7.0/Domain.GeneratedMSBuildEditorConfig.editorconfig
--- a/Domain/obj/Debug/net7.0/Domain.GeneratedMSBuildEditorConfig.editorconfig	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/Debug/net7.0/Domain.GeneratedMSBuildEditorConfig.editorconfig	(date 1699353445012)
@@ -8,4 +8,4 @@
 build_property.EnforceExtendedAnalyzerRules = 
 build_property._SupportedPlatformList = Linux,macOS,Windows
 build_property.RootNamespace = Domain
-build_property.ProjectDir = C:\Users\pind9\OneDrive\Desktop\SEP3\Domain\
+build_property.ProjectDir = /Users/dominikakrullova/Desktop/SEP3Real/Domain/
Index: Application/LogicInterfaces/IStudentLogic.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/LogicInterfaces/IStudentLogic.cs b/Application/LogicInterfaces/IStudentLogic.cs
new file mode 100644
--- /dev/null	(date 1699354912238)
+++ b/Application/LogicInterfaces/IStudentLogic.cs	(date 1699354912238)
@@ -0,0 +1,10 @@
+using Domain;
+using Domain.DTOs;
+
+namespace Application.LogicInterfaces;
+
+public interface IStudentLogic
+{
+    Task<Student> CreateAsyncStudent(UserCreationDto userToCreate);
+    public Task<IEnumerable<Student>> GetAsyncStudent(SearchUserParametersDto searchParameters);
+}
\ No newline at end of file
Index: Domain/obj/Debug/net7.0/Domain.AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"Domain\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"Domain\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"Domain\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/Debug/net7.0/Domain.AssemblyInfo.cs b/Domain/obj/Debug/net7.0/Domain.AssemblyInfo.cs
--- a/Domain/obj/Debug/net7.0/Domain.AssemblyInfo.cs	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/Debug/net7.0/Domain.AssemblyInfo.cs	(date 1699353445015)
@@ -1,7 +1,6 @@
 //------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
 //
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
Index: Application/Logic/TeacherLogic.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/Logic/TeacherLogic.cs b/Application/Logic/TeacherLogic.cs
new file mode 100644
--- /dev/null	(date 1699354881765)
+++ b/Application/Logic/TeacherLogic.cs	(date 1699354881765)
@@ -0,0 +1,53 @@
+using Application.DaoInterfaces;
+using Application.LogicInterfaces;
+using Domain;
+using Domain.DTOs;
+
+namespace Application.Logic;
+
+public class TeacherLogic : ITeacherLogic
+{
+    private readonly ITeacherDao userDao;
+    private ITeacherLogic _teacherLogicImplementation;
+
+    public TeacherLogic(ITeacherDao userDao)
+    {
+        this.userDao = userDao;
+    }
+
+    public async Task<Teacher> CreateAsyncTeacher(UserCreationDto dto)
+    {
+        Teacher? existing = await userDao.GetByIdAsyncTeacher(dto.Id);
+        if (existing != null)
+            throw new Exception("Id already taken!");
+
+        ValidateData(dto);
+        
+        
+        Teacher toCreate = new Teacher(dto.Id, dto.Password, dto.Name);
+    
+        Teacher created = await userDao.CreateAsyncTeacher(toCreate);
+    
+        return created;
+    }
+
+    public Task<IEnumerable<Teacher>> GetAsyncTeacher(SearchUserParametersDto searchParameters)
+    {
+        return userDao.GetAsyncTeacher(searchParameters);
+
+    }
+    
+
+    private static void ValidateData(UserCreationDto userToCreate)
+    {
+        string id = userToCreate.Id;
+
+        if (id.Length != 6)
+            throw new Exception("VIA ID must be 6 characters!");
+
+        string password = userToCreate.Password;
+
+        if (password.Length > 8) throw new Exception("Password must be at least 8 characters. ");
+
+    }
+}
\ No newline at end of file
Index: Application/Logic/StudentLogic.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/Logic/StudentLogic.cs b/Application/Logic/StudentLogic.cs
new file mode 100644
--- /dev/null	(date 1699354868904)
+++ b/Application/Logic/StudentLogic.cs	(date 1699354868904)
@@ -0,0 +1,51 @@
+using Application.DaoInterfaces;
+using Application.LogicInterfaces;
+using Domain;
+using Domain.DTOs;
+
+namespace Application.Logic;
+
+public class StudentLogic  : IStudentLogic
+{
+    private readonly IStudentDao userDao;
+
+    public StudentLogic(IStudentDao userDao)
+    {
+        this.userDao = userDao;
+    }
+
+    public async Task<Student> CreateAsyncStudent(UserCreationDto dto)
+    {
+        User? existing = await userDao.GetByIdAsync(dto.Id);
+        if (existing != null)
+            throw new Exception("Id already taken!");
+
+        ValidateData(dto);
+        
+        
+        Student toCreate = new Student(dto.Id, dto.Password, dto.Name);
+    
+        User created = await userDao.CreateAsyncStudent(toCreate);
+    
+        return (Student)created;
+    }
+
+    public Task<IEnumerable<Student>> GetAsyncStudent(SearchUserParametersDto searchParameters)
+    {
+        return userDao.GetAsyncStudent(searchParameters);
+    }
+    
+
+    private static void ValidateData(UserCreationDto userToCreate)
+    {
+        string id = userToCreate.Id;
+
+        if (id.Length != 6)
+            throw new Exception("VIA ID must be 6 characters!");
+
+        string password = userToCreate.Password;
+
+        if (password.Length > 8) throw new Exception("Password must be at least 8 characters. ");
+
+    }
+}
\ No newline at end of file
Index: Domain/obj/Domain.csproj.nuget.dgspec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"format\": 1,\n  \"restore\": {\n    \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\": {}\n  },\n  \"projects\": {\n    \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\": {\n      \"version\": \"1.0.0\",\n      \"restore\": {\n        \"projectUniqueName\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\n        \"projectName\": \"Domain\",\n        \"projectPath\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\n        \"packagesPath\": \"C:\\\\Users\\\\pind9\\\\.nuget\\\\packages\\\\\",\n        \"outputPath\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\obj\\\\\",\n        \"projectStyle\": \"PackageReference\",\n        \"configFilePaths\": [\n          \"C:\\\\Users\\\\pind9\\\\AppData\\\\Roaming\\\\NuGet\\\\NuGet.Config\"\n        ],\n        \"originalTargetFrameworks\": [\n          \"net7.0\"\n        ],\n        \"sources\": {\n          \"https://api.nuget.org/v3/index.json\": {}\n        },\n        \"frameworks\": {\n          \"net7.0\": {\n            \"targetAlias\": \"net7.0\",\n            \"projectReferences\": {}\n          }\n        },\n        \"warningProperties\": {\n          \"warnAsError\": [\n            \"NU1605\"\n          ]\n        }\n      },\n      \"frameworks\": {\n        \"net7.0\": {\n          \"targetAlias\": \"net7.0\",\n          \"imports\": [\n            \"net461\",\n            \"net462\",\n            \"net47\",\n            \"net471\",\n            \"net472\",\n            \"net48\",\n            \"net481\"\n          ],\n          \"assetTargetFallback\": true,\n          \"warn\": true,\n          \"frameworkReferences\": {\n            \"Microsoft.NETCore.App\": {\n              \"privateAssets\": \"all\"\n            }\n          },\n          \"runtimeIdentifierGraphPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\7.0.400\\\\RuntimeIdentifierGraph.json\"\n        }\n      }\n    }\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/Domain.csproj.nuget.dgspec.json b/Domain/obj/Domain.csproj.nuget.dgspec.json
--- a/Domain/obj/Domain.csproj.nuget.dgspec.json	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/Domain.csproj.nuget.dgspec.json	(date 1699353445745)
@@ -1,20 +1,20 @@
 {
   "format": 1,
   "restore": {
-    "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj": {}
+    "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj": {}
   },
   "projects": {
-    "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj": {
+    "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj": {
       "version": "1.0.0",
       "restore": {
-        "projectUniqueName": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj",
+        "projectUniqueName": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj",
         "projectName": "Domain",
-        "projectPath": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj",
-        "packagesPath": "C:\\Users\\pind9\\.nuget\\packages\\",
-        "outputPath": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\obj\\",
+        "projectPath": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj",
+        "packagesPath": "/Users/dominikakrullova/.nuget/packages/",
+        "outputPath": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/obj/",
         "projectStyle": "PackageReference",
         "configFilePaths": [
-          "C:\\Users\\pind9\\AppData\\Roaming\\NuGet\\NuGet.Config"
+          "/Users/dominikakrullova/.nuget/NuGet/NuGet.Config"
         ],
         "originalTargetFrameworks": [
           "net7.0"
@@ -53,7 +53,7 @@
               "privateAssets": "all"
             }
           },
-          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\7.0.400\\RuntimeIdentifierGraph.json"
+          "runtimeIdentifierGraphPath": "/usr/local/share/dotnet/sdk/7.0.400/RuntimeIdentifierGraph.json"
         }
       }
     }
Index: Application/DaoInterfaces/ITeacherDao.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/DaoInterfaces/ITeacherDao.cs b/Application/DaoInterfaces/ITeacherDao.cs
new file mode 100644
--- /dev/null	(date 1699356515880)
+++ b/Application/DaoInterfaces/ITeacherDao.cs	(date 1699356515880)
@@ -0,0 +1,12 @@
+using Domain;
+using Domain.DTOs;
+
+namespace Application.DaoInterfaces;
+
+public interface ITeacherDao
+{
+
+    Task<Teacher> CreateAsyncTeacher(Teacher teacher);
+    Task<Teacher?> GetByIdAsyncTeacher(string id);
+    public Task<IEnumerable<Teacher>> GetAsyncTeacher(SearchUserParametersDto searchParameters);
+}
\ No newline at end of file
Index: Domain/obj/project.assets.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"version\": 3,\n  \"targets\": {\n    \"net7.0\": {}\n  },\n  \"libraries\": {},\n  \"projectFileDependencyGroups\": {\n    \"net7.0\": []\n  },\n  \"packageFolders\": {\n    \"C:\\\\Users\\\\pind9\\\\.nuget\\\\packages\\\\\": {}\n  },\n  \"project\": {\n    \"version\": \"1.0.0\",\n    \"restore\": {\n      \"projectUniqueName\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\n      \"projectName\": \"Domain\",\n      \"projectPath\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\n      \"packagesPath\": \"C:\\\\Users\\\\pind9\\\\.nuget\\\\packages\\\\\",\n      \"outputPath\": \"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\obj\\\\\",\n      \"projectStyle\": \"PackageReference\",\n      \"configFilePaths\": [\n        \"C:\\\\Users\\\\pind9\\\\AppData\\\\Roaming\\\\NuGet\\\\NuGet.Config\"\n      ],\n      \"originalTargetFrameworks\": [\n        \"net7.0\"\n      ],\n      \"sources\": {\n        \"https://api.nuget.org/v3/index.json\": {}\n      },\n      \"frameworks\": {\n        \"net7.0\": {\n          \"targetAlias\": \"net7.0\",\n          \"projectReferences\": {}\n        }\n      },\n      \"warningProperties\": {\n        \"warnAsError\": [\n          \"NU1605\"\n        ]\n      }\n    },\n    \"frameworks\": {\n      \"net7.0\": {\n        \"targetAlias\": \"net7.0\",\n        \"imports\": [\n          \"net461\",\n          \"net462\",\n          \"net47\",\n          \"net471\",\n          \"net472\",\n          \"net48\",\n          \"net481\"\n        ],\n        \"assetTargetFallback\": true,\n        \"warn\": true,\n        \"frameworkReferences\": {\n          \"Microsoft.NETCore.App\": {\n            \"privateAssets\": \"all\"\n          }\n        },\n        \"runtimeIdentifierGraphPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\7.0.400\\\\RuntimeIdentifierGraph.json\"\n      }\n    }\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/project.assets.json b/Domain/obj/project.assets.json
--- a/Domain/obj/project.assets.json	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/project.assets.json	(date 1699353445743)
@@ -8,19 +8,19 @@
     "net7.0": []
   },
   "packageFolders": {
-    "C:\\Users\\pind9\\.nuget\\packages\\": {}
+    "/Users/dominikakrullova/.nuget/packages/": {}
   },
   "project": {
     "version": "1.0.0",
     "restore": {
-      "projectUniqueName": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj",
+      "projectUniqueName": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj",
       "projectName": "Domain",
-      "projectPath": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj",
-      "packagesPath": "C:\\Users\\pind9\\.nuget\\packages\\",
-      "outputPath": "C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\obj\\",
+      "projectPath": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj",
+      "packagesPath": "/Users/dominikakrullova/.nuget/packages/",
+      "outputPath": "/Users/dominikakrullova/Desktop/SEP3Real/Domain/obj/",
       "projectStyle": "PackageReference",
       "configFilePaths": [
-        "C:\\Users\\pind9\\AppData\\Roaming\\NuGet\\NuGet.Config"
+        "/Users/dominikakrullova/.nuget/NuGet/NuGet.Config"
       ],
       "originalTargetFrameworks": [
         "net7.0"
@@ -59,7 +59,7 @@
             "privateAssets": "all"
           }
         },
-        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\7.0.400\\RuntimeIdentifierGraph.json"
+        "runtimeIdentifierGraphPath": "/usr/local/share/dotnet/sdk/7.0.400/RuntimeIdentifierGraph.json"
       }
     }
   }
Index: Application/DaoInterfaces/IStudentDao.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/DaoInterfaces/IStudentDao.cs b/Application/DaoInterfaces/IStudentDao.cs
new file mode 100644
--- /dev/null	(date 1699354826471)
+++ b/Application/DaoInterfaces/IStudentDao.cs	(date 1699354826471)
@@ -0,0 +1,12 @@
+using Domain;
+using Domain.DTOs;
+
+namespace Application.DaoInterfaces;
+
+public interface IStudentDao
+{
+    Task<Student?> GetByIdAsync(string id);
+    Task<Student> CreateAsyncStudent(Student student);
+    public Task<IEnumerable<Student>> GetAsyncStudent(SearchUserParametersDto searchParameters);
+
+}
\ No newline at end of file
Index: Domain/obj/Domain.csproj.nuget.g.props
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\n    <RestoreSuccess Condition=\" '$(RestoreSuccess)' == '' \">True</RestoreSuccess>\n    <RestoreTool Condition=\" '$(RestoreTool)' == '' \">NuGet</RestoreTool>\n    <ProjectAssetsFile Condition=\" '$(ProjectAssetsFile)' == '' \">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">$(UserProfile)\\.nuget\\packages\\</NuGetPackageRoot>\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\pind9\\.nuget\\packages\\</NuGetPackageFolders>\n    <NuGetProjectStyle Condition=\" '$(NuGetProjectStyle)' == '' \">PackageReference</NuGetProjectStyle>\n    <NuGetToolVersion Condition=\" '$(NuGetToolVersion)' == '' \">6.6.0</NuGetToolVersion>\n  </PropertyGroup>\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\n    <SourceRoot Include=\"C:\\Users\\pind9\\.nuget\\packages\\\" />\n  </ItemGroup>\n</Project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/Domain.csproj.nuget.g.props b/Domain/obj/Domain.csproj.nuget.g.props
--- a/Domain/obj/Domain.csproj.nuget.g.props	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/Domain.csproj.nuget.g.props	(date 1699353445741)
@@ -4,12 +4,12 @@
     <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
     <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
     <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
-    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
-    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\pind9\.nuget\packages\</NuGetPackageFolders>
+    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">/Users/dominikakrullova/.nuget/packages/</NuGetPackageRoot>
+    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">/Users/dominikakrullova/.nuget/packages/</NuGetPackageFolders>
     <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
     <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.6.0</NuGetToolVersion>
   </PropertyGroup>
   <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
-    <SourceRoot Include="C:\Users\pind9\.nuget\packages\" />
+    <SourceRoot Include="/Users/dominikakrullova/.nuget/packages/" />
   </ItemGroup>
 </Project>
\ No newline at end of file
Index: Domain/DTOs/UserCreationDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/DTOs/UserCreationDto.cs b/Domain/DTOs/UserCreationDto.cs
new file mode 100644
--- /dev/null	(date 1699358354349)
+++ b/Domain/DTOs/UserCreationDto.cs	(date 1699358354349)
@@ -0,0 +1,23 @@
+using System.Text.Json.Serialization;
+
+namespace Domain.DTOs;
+
+public class UserCreationDto
+{
+    public string Id { get; set; }
+    public string Password { get; set; }
+    public string Name { get; set; }
+
+    public UserCreationDto(string id, string password, string name)
+    {
+        Id = id;
+        Password = password;
+        Name = name;
+    }
+
+    [JsonConstructor]
+    public UserCreationDto(string id)
+    {
+        Id = id;
+    }
+}
\ No newline at end of file
Index: Domain/obj/rider.project.model.nuget.info
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>16993503974825926
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/rider.project.model.nuget.info b/Domain/obj/rider.project.model.nuget.info
--- a/Domain/obj/rider.project.model.nuget.info	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/rider.project.model.nuget.info	(date 1699353445220)
@@ -1,1 +1,1 @@
-16993503974825926
\ No newline at end of file
+16993534444931544
\ No newline at end of file
Index: Domain/obj/rider.project.restore.info
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>16993477145943708
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/rider.project.restore.info b/Domain/obj/rider.project.restore.info
--- a/Domain/obj/rider.project.restore.info	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/rider.project.restore.info	(date 1699357130281)
@@ -1,1 +1,1 @@
-16993477145943708
\ No newline at end of file
+16993534457459994
\ No newline at end of file
Index: FileData/DAOs/UserFileDao.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FileData/DAOs/UserFileDao.cs b/FileData/DAOs/UserFileDao.cs
new file mode 100644
--- /dev/null	(date 1699355446696)
+++ b/FileData/DAOs/UserFileDao.cs	(date 1699355446696)
@@ -0,0 +1,90 @@
+using Application.DaoInterfaces;
+using Domain;
+using Domain.DTOs;
+
+namespace FileData.DAOs;
+
+public class UserFileDao : IStudentDao, ITeacherDao
+{
+    private readonly FileContext context;
+
+    public UserFileDao(FileContext context)
+    {
+        this.context = context;
+    }
+    
+
+    public Task<Student?> GetByIdAsync(string userName)
+    {
+        Student? existing = context.Students.FirstOrDefault(u =>
+            u.Id.Equals(userName, StringComparison.OrdinalIgnoreCase)
+        );
+        return Task.FromResult(existing);
+    }
+
+    public Task<Teacher> CreateAsyncTeacher(Teacher teacher)
+    {
+        int userId =1;
+        if (context.Teachers.Any())
+        {
+            userId = context.Teachers.Max(s => s.UserId);
+            userId++;
+        }
+
+        teacher.UserId = userId;
+
+        context.Teachers.Add(teacher);
+        context.SaveChanges();
+
+        return Task.FromResult(teacher);
+    }
+
+    public Task<Student> CreateAsyncStudent(Student student)
+    {
+        int userId =1;
+        if (context.Students.Any())
+        {
+            userId = context.Students.Max(s => s.UserId);
+            userId++;
+        }
+
+        student.UserId = userId;
+
+        context.Students.Add(student);
+        context.SaveChanges();
+
+        return Task.FromResult(student);
+    }
+
+    public Task<IEnumerable<Student>> GetAsyncStudent(SearchUserParametersDto searchParameters)
+    {
+        IEnumerable<Student> students = context.Students.AsEnumerable();
+        if (searchParameters.IdContains != null)
+        {
+            students = context.Students.Where(u => u.Id.Contains(searchParameters.IdContains, StringComparison.OrdinalIgnoreCase));
+        }
+
+        return Task.FromResult(students);
+    }
+
+    public Task<Teacher?> GetByIdAsyncTeacher(string id)
+    {
+        Teacher? existing = context.Teachers.FirstOrDefault(u =>
+            u.Id.Equals(id, StringComparison.OrdinalIgnoreCase)
+        );
+        return Task.FromResult(existing);
+    }
+    
+
+    public Task<IEnumerable<Teacher>> GetAsyncTeacher(SearchUserParametersDto searchParameters)
+    {
+        IEnumerable<Teacher> teachers = context.Teachers.AsEnumerable();
+        if (searchParameters.IdContains != null)
+        {
+            teachers = context.Teachers.Where(u => u.Id.Contains(searchParameters.IdContains, StringComparison.OrdinalIgnoreCase));
+        }
+
+        return Task.FromResult(teachers);
+    }
+    
+}
\ No newline at end of file
Index: Domain/obj/project.packagespec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"restore\":{\"projectUniqueName\":\"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\"projectName\":\"Domain\",\"projectPath\":\"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\Domain.csproj\",\"outputPath\":\"C:\\\\Users\\\\pind9\\\\OneDrive\\\\Desktop\\\\SEP3\\\\Domain\\\\obj\\\\\",\"projectStyle\":\"PackageReference\",\"originalTargetFrameworks\":[\"net7.0\"],\"sources\":{\"https://api.nuget.org/v3/index.json\":{}},\"frameworks\":{\"net7.0\":{\"targetAlias\":\"net7.0\",\"projectReferences\":{}}},\"warningProperties\":{\"warnAsError\":[\"NU1605\"]}}\"frameworks\":{\"net7.0\":{\"targetAlias\":\"net7.0\",\"imports\":[\"net461\",\"net462\",\"net47\",\"net471\",\"net472\",\"net48\",\"net481\"],\"assetTargetFallback\":true,\"warn\":true,\"frameworkReferences\":{\"Microsoft.NETCore.App\":{\"privateAssets\":\"all\"}},\"runtimeIdentifierGraphPath\":\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\7.0.400\\\\RuntimeIdentifierGraph.json\"}}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/obj/project.packagespec.json b/Domain/obj/project.packagespec.json
--- a/Domain/obj/project.packagespec.json	(revision 878f9d2026793018162f00633279d8f8435455ba)
+++ b/Domain/obj/project.packagespec.json	(date 1699353445112)
@@ -1,1 +1,1 @@
-"restore":{"projectUniqueName":"C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj","projectName":"Domain","projectPath":"C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\Domain.csproj","outputPath":"C:\\Users\\pind9\\OneDrive\\Desktop\\SEP3\\Domain\\obj\\","projectStyle":"PackageReference","originalTargetFrameworks":["net7.0"],"sources":{"https://api.nuget.org/v3/index.json":{}},"frameworks":{"net7.0":{"targetAlias":"net7.0","projectReferences":{}}},"warningProperties":{"warnAsError":["NU1605"]}}"frameworks":{"net7.0":{"targetAlias":"net7.0","imports":["net461","net462","net47","net471","net472","net48","net481"],"assetTargetFallback":true,"warn":true,"frameworkReferences":{"Microsoft.NETCore.App":{"privateAssets":"all"}},"runtimeIdentifierGraphPath":"C:\\Program Files\\dotnet\\sdk\\7.0.400\\RuntimeIdentifierGraph.json"}}
\ No newline at end of file
+"restore":{"projectUniqueName":"/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj","projectName":"Domain","projectPath":"/Users/dominikakrullova/Desktop/SEP3Real/Domain/Domain.csproj","outputPath":"/Users/dominikakrullova/Desktop/SEP3Real/Domain/obj/","projectStyle":"PackageReference","originalTargetFrameworks":["net7.0"],"sources":{"https://api.nuget.org/v3/index.json":{}},"frameworks":{"net7.0":{"targetAlias":"net7.0","projectReferences":{}}},"warningProperties":{"warnAsError":["NU1605"]}}"frameworks":{"net7.0":{"targetAlias":"net7.0","imports":["net461","net462","net47","net471","net472","net48","net481"],"assetTargetFallback":true,"warn":true,"frameworkReferences":{"Microsoft.NETCore.App":{"privateAssets":"all"}},"runtimeIdentifierGraphPath":"/usr/local/share/dotnet/sdk/7.0.400/RuntimeIdentifierGraph.json"}}
\ No newline at end of file
Index: FileData/FileContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FileData/FileContext.cs b/FileData/FileContext.cs
new file mode 100644
--- /dev/null	(date 1699354032029)
+++ b/FileData/FileContext.cs	(date 1699354032029)
@@ -0,0 +1,85 @@
+using System.Text.Json;
+using Domain;
+
+namespace FileData;
+
+public class FileContext
+{
+
+    private const string filePath = "data.json";
+    private DataContainer? dataContainer;
+
+    public ICollection<Teacher> Teachers
+    {
+        get
+        {
+            LoadData();
+            return dataContainer!.Teachers;
+        }
+    }
+
+    public ICollection<Student> Students
+    {
+        get
+        {
+            LoadData();
+            return dataContainer!.Students;
+        }
+    }
+    public ICollection<Supervisor> Supervisors
+    {
+        get
+        {
+            LoadData();
+            return dataContainer!.Supervisors;
+        }
+    }
+    public ICollection<Class> Classes
+    {
+        get
+        {
+            LoadData();
+            return dataContainer!.Classes;
+        }
+    }
+    public ICollection<Exam> Exams
+    {
+        get
+        {
+            LoadData();
+            return dataContainer!.Exams;
+        }
+    }
+
+    private void LoadData()
+    {
+        if (dataContainer != null) return;
+
+        if (!File.Exists(filePath))
+        {
+            dataContainer = new ()
+            {
+                Teachers = new List<Teacher>(),
+                Students = new List<Student>(),
+                Supervisors = new List<Supervisor>(),
+                Exams = new List<Exam>(),
+                Classes = new List<Class>(),
+
+            };
+            return;
+        }
+        string content = File.ReadAllText(filePath);
+        dataContainer = JsonSerializer.Deserialize<DataContainer>(content);
+    }
+
+
+    public void SaveChanges()
+    {
+        string serialized = JsonSerializer.Serialize(dataContainer, new JsonSerializerOptions
+        {
+            WriteIndented = true
+        });
+        File.WriteAllText(filePath, serialized);
+        dataContainer = null;
+    }
+}
\ No newline at end of file
Index: FileData/DataContainer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FileData/DataContainer.cs b/FileData/DataContainer.cs
new file mode 100644
--- /dev/null	(date 1699353992652)
+++ b/FileData/DataContainer.cs	(date 1699353992652)
@@ -0,0 +1,12 @@
+using Domain;
+
+namespace FileData;
+
+public class DataContainer
+{
+    public ICollection<Teacher> Teachers { get; set; }
+    public ICollection<Class> Classes { get; set; }
+    public ICollection<Exam> Exams { get; set; }
+    public ICollection<Student> Students { get; set; }
+    public ICollection<Supervisor> Supervisors { get; set; }
+}
\ No newline at end of file
Index: Blazor/Pages/CreateUser.razor
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blazor/Pages/CreateUser.razor b/Blazor/Pages/CreateUser.razor
new file mode 100644
--- /dev/null	(date 1699357620781)
+++ b/Blazor/Pages/CreateUser.razor	(date 1699357620781)
@@ -0,0 +1,93 @@
+@page "/CreateUser"
+@using Domain.DTOs
+@using HttpClients.ClientInterfaces
+@inject IUserService userService;
+
+<div class="card">
+    <h3>Create Student</h3>
+    <div class="form-group field">
+        <label>Students via id:</label>
+        <input type="text" @bind="id" @bind:event="oninput"/>
+        @if (!string.IsNullOrEmpty(resultMsg))
+        {
+            <label style="color: @color">@resultMsg</label>
+        }
+        <label>Students name:</label>
+                    <input type="text" @bind="name" @bind:event="oninput"/>
+                    @if (!string.IsNullOrEmpty(resultMsg))
+                    {
+                        <label style="color: @color">@resultMsg</label>
+                    }
+    </div>
+    <div class="button-row">
+        <button @onclick="CreateStudent" disabled="@(string.IsNullOrEmpty(id))" class="acceptbtn">Create</button>
+    </div>
+</div>
+
+<div class="card">
+    <h3>Create Teacher</h3>
+    <div class="form-group field">
+        <label>Teachers via id:</label>
+        <input type="text" @bind="id" @bind:event="oninput"/>
+        @if (!string.IsNullOrEmpty(resultMsg))
+        {
+            <label style="color: @color">@resultMsg</label>
+        }
+        <label>Teachers name:</label>
+                <input type="text" @bind="name" @bind:event="oninput"/>
+                @if (!string.IsNullOrEmpty(resultMsg))
+                {
+                    <label style="color: @color">@resultMsg</label>
+                }
+    </div>
+    <div class="button-row">
+        <button @onclick="CreateTeacher" disabled="@(string.IsNullOrEmpty(id))" class="acceptbtn">Create</button>
+    </div>
+</div>
+
+@code {
+    private string id = "";
+    private string name = "";
+    private string resultMsg = "";
+    private string color = "";
+
+    private async Task CreateTeacher()
+    {
+        
+        resultMsg = "";
+
+        try
+        {
+            await userService.CreateTeacher(new UserCreationDto(id));
+            id = "";
+            resultMsg = "User successfully created";
+            color = "green";
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            resultMsg = e.Message;
+            color = "red";
+        }
+    }
+    
+    private async Task CreateStudent()
+    {
+        
+        resultMsg = "";
+
+        try
+        {
+            await userService.CreateStudent(new UserCreationDto(id));
+            id = "";
+            resultMsg = "User successfully created";
+            color = "green";
+        }
+        catch (Exception e)
+        {
+            Console.WriteLine(e);
+            resultMsg = e.Message;
+            color = "red";
+        }
+    }
+}
\ No newline at end of file
Index: HttpClients/Implementations/UserHttpClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HttpClients/Implementations/UserHttpClient.cs b/HttpClients/Implementations/UserHttpClient.cs
new file mode 100644
--- /dev/null	(date 1699357092171)
+++ b/HttpClients/Implementations/UserHttpClient.cs	(date 1699357092171)
@@ -0,0 +1,52 @@
+using System.Net.Http.Json;
+using System.Text.Json;
+using Domain;
+using Domain.DTOs;
+using HttpClients.ClientInterfaces;
+
+namespace HttpClients.Implementations;
+
+public class UserHttpClient : IUserService
+{
+    private readonly HttpClient client;
+
+    public UserHttpClient(HttpClient client)
+    {
+        this.client = client;
+    }
+
+    public async Task<Student> CreateStudent(UserCreationDto dto)
+    {
+        HttpResponseMessage response = await client.PostAsJsonAsync("/students", dto);
+        string result = await response.Content.ReadAsStringAsync();
+        if (!response.IsSuccessStatusCode)
+        {
+            throw new Exception(result);
+        }
+
+        Student student = JsonSerializer.Deserialize<Student>(result, new JsonSerializerOptions
+        {
+            PropertyNameCaseInsensitive = true
+        })!;
+        return student;
+    }
+
+    public async Task<Teacher> CreateTeacher(UserCreationDto dto)
+    {
+        HttpResponseMessage response = await client.PostAsJsonAsync("/teachers", dto);
+        string result = await response.Content.ReadAsStringAsync();
+        if (!response.IsSuccessStatusCode)
+        {
+            throw new Exception(result);
+        }
+
+        
+        Teacher teacher = JsonSerializer.Deserialize<Teacher>(result, new JsonSerializerOptions
+        {
+            PropertyNameCaseInsensitive = true
+        })!;
+        return teacher;
+    }
+
+
+}
\ No newline at end of file
Index: HttpClients/ClientInterfaces/IUserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HttpClients/ClientInterfaces/IUserService.cs b/HttpClients/ClientInterfaces/IUserService.cs
new file mode 100644
--- /dev/null	(date 1699357060461)
+++ b/HttpClients/ClientInterfaces/IUserService.cs	(date 1699357060461)
@@ -0,0 +1,10 @@
+using Domain;
+using Domain.DTOs;
+
+namespace HttpClients.ClientInterfaces;
+
+public interface IUserService
+{
+    Task<Student> CreateStudent(UserCreationDto dto);
+    Task<Teacher> CreateTeacher(UserCreationDto dto);
+}
\ No newline at end of file
